// <auto-generated />
using System;
using GearForgeXI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GearForgeXI.Migrations
{
    [DbContext(typeof(GearDbContext))]
    [Migration("20250820053835_RemoveIsBaseStat")]
    partial class RemoveIsBaseStat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GearForgeXI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GearForgeXI.Models.CharacterJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("JobLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MasterLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("CharacterProfileId", "JobId")
                        .IsUnique();

                    b.ToTable("CharacterJobs");
                });

            modelBuilder.Entity("GearForgeXI.Models.CharacterProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CharacterName", "Server")
                        .IsUnique();

                    b.ToTable("CharacterProfiles");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GearItemCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GearItemCategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("Verified");

                    b.ToTable("GearItems");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GearItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1H"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2H"
                        },
                        new
                        {
                            Id = 3,
                            Name = "H2H"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Shield"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Grip"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Instrument"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bow"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crossbow"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Gun"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Arrow"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bolt"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bullet"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ammo"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Cloak"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Thrown"
                        });
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GearItemId")
                        .HasColumnType("integer");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("GearItemId", "JobId")
                        .IsUnique();

                    b.ToTable("GearItemJobs");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GearItemId")
                        .HasColumnType("integer");

                    b.Property<int>("GearSlotId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GearSlotId");

                    b.HasIndex("GearItemId", "GearSlotId")
                        .IsUnique();

                    b.ToTable("GearItemSlots");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GearItemId")
                        .HasColumnType("integer");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GearItemId");

                    b.HasIndex("StatId");

                    b.ToTable("GearItemStats");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("GearSets");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GearItemId")
                        .HasColumnType("integer");

                    b.Property<int>("GearSetId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GearItemId");

                    b.HasIndex("GearSetId", "Position")
                        .IsUnique();

                    b.ToTable("GearSetItems");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("GearSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sub"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Range"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ammo"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Head"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Neck"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ear"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Body"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hands"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ring"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Waist"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Legs"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Feet"
                        });
                });

            modelBuilder.Entity("GearForgeXI.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CanDualWield")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "WAR",
                            CanDualWield = false,
                            FullName = "Warrior"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "MNK",
                            CanDualWield = false,
                            FullName = "Monk"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "WHM",
                            CanDualWield = false,
                            FullName = "White Mage"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "BLM",
                            CanDualWield = false,
                            FullName = "Black Mage"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "RDM",
                            CanDualWield = false,
                            FullName = "Red Mage"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "THF",
                            CanDualWield = false,
                            FullName = "Thief"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "PLD",
                            CanDualWield = false,
                            FullName = "Paladin"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "DRK",
                            CanDualWield = false,
                            FullName = "Dark Knight"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "BST",
                            CanDualWield = false,
                            FullName = "Beastmaster"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "BRD",
                            CanDualWield = false,
                            FullName = "Bard"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "RNG",
                            CanDualWield = false,
                            FullName = "Ranger"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "SAM",
                            CanDualWield = false,
                            FullName = "Samurai"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "NIN",
                            CanDualWield = false,
                            FullName = "Ninja"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "DRG",
                            CanDualWield = false,
                            FullName = "Dragoon"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "SMN",
                            CanDualWield = false,
                            FullName = "Summoner"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "BLU",
                            CanDualWield = false,
                            FullName = "Blue Mage"
                        },
                        new
                        {
                            Id = 17,
                            Abbreviation = "COR",
                            CanDualWield = false,
                            FullName = "Corsair"
                        },
                        new
                        {
                            Id = 18,
                            Abbreviation = "PUP",
                            CanDualWield = false,
                            FullName = "Puppetmaster"
                        },
                        new
                        {
                            Id = 19,
                            Abbreviation = "DNC",
                            CanDualWield = false,
                            FullName = "Dancer"
                        },
                        new
                        {
                            Id = 20,
                            Abbreviation = "SCH",
                            CanDualWield = false,
                            FullName = "Scholar"
                        },
                        new
                        {
                            Id = 21,
                            Abbreviation = "GEO",
                            CanDualWield = false,
                            FullName = "Geomancer"
                        },
                        new
                        {
                            Id = 22,
                            Abbreviation = "RUN",
                            CanDualWield = false,
                            FullName = "Rune Fencer"
                        });
                });

            modelBuilder.Entity("GearForgeXI.Models.JobBaseStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobConfigurationId");

                    b.HasIndex("StatId");

                    b.ToTable("JobBaseStats");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobConfigurations");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobConfigurationId");

                    b.HasIndex("StatId");

                    b.ToTable("JobGifts");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobPointBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobConfigurationId");

                    b.HasIndex("StatId");

                    b.ToTable("JobPointBonuses");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatId");

                    b.HasIndex("JobConfigurationId", "Level");

                    b.ToTable("JobTraits");
                });

            modelBuilder.Entity("GearForgeXI.Models.MasterLevelBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobConfigurationId");

                    b.HasIndex("StatId");

                    b.ToTable("MasterLevelBonuses");
                });

            modelBuilder.Entity("GearForgeXI.Models.RaceBaseStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RaceConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("StatId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RaceConfigurationId");

                    b.HasIndex("StatId");

                    b.ToTable("RaceBaseStats");
                });

            modelBuilder.Entity("GearForgeXI.Models.RaceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RaceConfigurations");
                });

            modelBuilder.Entity("GearForgeXI.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GearForgeXI.Models.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName1")
                        .HasColumnType("text");

                    b.Property<string>("AlternateName2")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GearForgeXI.Models.CharacterJob", b =>
                {
                    b.HasOne("GearForgeXI.Models.CharacterProfile", "CharacterProfile")
                        .WithMany("CharacterJobs")
                        .HasForeignKey("CharacterProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterProfile");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GearForgeXI.Models.CharacterProfile", b =>
                {
                    b.HasOne("GearForgeXI.Models.ApplicationUser", "User")
                        .WithMany("CharacterProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItem", b =>
                {
                    b.HasOne("GearForgeXI.Models.GearItemCategory", "Category")
                        .WithMany("GearItems")
                        .HasForeignKey("GearItemCategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemJob", b =>
                {
                    b.HasOne("GearForgeXI.Models.GearItem", "GearItem")
                        .WithMany("GearItemJobs")
                        .HasForeignKey("GearItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Job", "Job")
                        .WithMany("GearItemJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GearItem");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemSlot", b =>
                {
                    b.HasOne("GearForgeXI.Models.GearItem", "GearItem")
                        .WithMany("GearItemSlots")
                        .HasForeignKey("GearItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.GearSlot", "GearSlot")
                        .WithMany("GearItemSlots")
                        .HasForeignKey("GearSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GearItem");

                    b.Navigation("GearSlot");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemStat", b =>
                {
                    b.HasOne("GearForgeXI.Models.GearItem", "GearItem")
                        .WithMany("GearItemStats")
                        .HasForeignKey("GearItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany("GearItemStats")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GearItem");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSet", b =>
                {
                    b.HasOne("GearForgeXI.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.ApplicationUser", "User")
                        .WithMany("GearSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSetItem", b =>
                {
                    b.HasOne("GearForgeXI.Models.GearItem", "GearItem")
                        .WithMany()
                        .HasForeignKey("GearItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.GearSet", "GearSet")
                        .WithMany("GearSetItems")
                        .HasForeignKey("GearSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GearItem");

                    b.Navigation("GearSet");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobBaseStat", b =>
                {
                    b.HasOne("GearForgeXI.Models.JobConfiguration", "JobConfiguration")
                        .WithMany("JobBaseStats")
                        .HasForeignKey("JobConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany("JobBaseStats")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobConfiguration");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobConfiguration", b =>
                {
                    b.HasOne("GearForgeXI.Models.Job", "Job")
                        .WithOne("Configuration")
                        .HasForeignKey("GearForgeXI.Models.JobConfiguration", "JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobGift", b =>
                {
                    b.HasOne("GearForgeXI.Models.JobConfiguration", "JobConfiguration")
                        .WithMany("JobGifts")
                        .HasForeignKey("JobConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany("JobGifts")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobConfiguration");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobPointBonus", b =>
                {
                    b.HasOne("GearForgeXI.Models.JobConfiguration", "JobConfiguration")
                        .WithMany("JobPointBonuses")
                        .HasForeignKey("JobConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany("JobPointBonuses")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobConfiguration");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobTrait", b =>
                {
                    b.HasOne("GearForgeXI.Models.JobConfiguration", "JobConfiguration")
                        .WithMany("JobTraits")
                        .HasForeignKey("JobConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany("JobTraits")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobConfiguration");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.MasterLevelBonus", b =>
                {
                    b.HasOne("GearForgeXI.Models.JobConfiguration", "JobConfiguration")
                        .WithMany("MasterLevelBonuses")
                        .HasForeignKey("JobConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany("MasterLevelBonuses")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobConfiguration");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.RaceBaseStat", b =>
                {
                    b.HasOne("GearForgeXI.Models.RaceConfiguration", "RaceConfiguration")
                        .WithMany("RaceBaseStats")
                        .HasForeignKey("RaceConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceConfiguration");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("GearForgeXI.Models.RefreshToken", b =>
                {
                    b.HasOne("GearForgeXI.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GearForgeXI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GearForgeXI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GearForgeXI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GearForgeXI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GearForgeXI.Models.ApplicationUser", b =>
                {
                    b.Navigation("CharacterProfiles");

                    b.Navigation("GearSets");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GearForgeXI.Models.CharacterProfile", b =>
                {
                    b.Navigation("CharacterJobs");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItem", b =>
                {
                    b.Navigation("GearItemJobs");

                    b.Navigation("GearItemSlots");

                    b.Navigation("GearItemStats");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearItemCategory", b =>
                {
                    b.Navigation("GearItems");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSet", b =>
                {
                    b.Navigation("GearSetItems");
                });

            modelBuilder.Entity("GearForgeXI.Models.GearSlot", b =>
                {
                    b.Navigation("GearItemSlots");
                });

            modelBuilder.Entity("GearForgeXI.Models.Job", b =>
                {
                    b.Navigation("Configuration");

                    b.Navigation("GearItemJobs");
                });

            modelBuilder.Entity("GearForgeXI.Models.JobConfiguration", b =>
                {
                    b.Navigation("JobBaseStats");

                    b.Navigation("JobGifts");

                    b.Navigation("JobPointBonuses");

                    b.Navigation("JobTraits");

                    b.Navigation("MasterLevelBonuses");
                });

            modelBuilder.Entity("GearForgeXI.Models.RaceConfiguration", b =>
                {
                    b.Navigation("RaceBaseStats");
                });

            modelBuilder.Entity("GearForgeXI.Models.Stat", b =>
                {
                    b.Navigation("GearItemStats");

                    b.Navigation("JobBaseStats");

                    b.Navigation("JobGifts");

                    b.Navigation("JobPointBonuses");

                    b.Navigation("JobTraits");

                    b.Navigation("MasterLevelBonuses");
                });
#pragma warning restore 612, 618
        }
    }
}
